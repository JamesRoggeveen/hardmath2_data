name: Build & Deploy Dataset to Hugging Face

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      HF_TOKEN: ${{ secrets.HF_TOKEN }}
      # HF_REPO should be like 'username/dataset-name' or 'org/dataset-name'
      HF_REPO: ${{ secrets.HF_REPO }}
      # Use a dedicated directory name to avoid conflicts
      HF_DATASET_DIR: hf-dataset-repo

    steps:
      # 1) Checkout your GitHub repo
      - uses: actions/checkout@v4

      # 2) Set up Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 3) Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml huggingface_hub

      # 4) Build JSONL from YAML
      - name: Build JSONL
        run: python scripts/build_jsonl.py data_src data

      # 5) Login to Hugging Face CLI
      # This configures git credentials automatically
      - name: Login to Hugging Face CLI
        run: huggingface-cli login --token $HF_TOKEN --add-to-git-credential

      # 6) Clone the HF dataset repo (using the standard HTTPS URL)
      - name: Clone HF dataset repo
        run: |
          # Clone without embedding token in URL - git will use credentials configured by login
          git clone https://huggingface.co/datasets/${HF_REPO} ${{ env.HF_DATASET_DIR }}

      # 7) Copy anonymous README
      - name: Copy anonymous README
        run: |
          cp README_ANON.md ${{ env.HF_DATASET_DIR }}/README.md

      # 8) Clean & sync JSONL
      - name: Sync JSONL
        run: |
          mkdir -p ${{ env.HF_DATASET_DIR }}/data
          # Use find for safer deletion if the directory might be empty
          find ${{ env.HF_DATASET_DIR }}/data -name '*.jsonl' -delete
          cp data/*.jsonl ${{ env.HF_DATASET_DIR }}/data/

      # 9) Commit & push as “CI Bot”
      - name: Commit & Push to HF
        run: |
          cd ${{ env.HF_DATASET_DIR }}
          git config user.name "CI Bot"
          git config user.email "ci-bot@users.noreply.github.com" # Use a noreply email

          # Check if there are changes to commit
          if ! git diff --quiet && ! git diff --staged --quiet; then
            echo "Changes detected, adding and committing..."
            git add README.md data/*.jsonl
            git commit -m "Auto-update dataset" 
            echo "Pushing changes..."
            git push origin main # Push should now work using configured credentials
          else
            echo "Nothing to commit."
          fi